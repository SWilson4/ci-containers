LOGS=`pwd`/logs

generate_table() {
  echo "                     +---------------------------+---------------------------+"
  echo "                     | OQS-OpenSSL_1_0_2-stable  |  OQS-OpenSSL_1_1_1-stable |"
  echo " +-------------------+---------------------------+---------------------------+"
  echo " | liboqs master     |        $1            |          $2          |"
  echo " +-------------------+---------------------------+---------------------------+" 
  echo " | liboqs nist-branch|        $3            |          $4          |"
  echo " +-------------------+---------------------------+---------------------------+" 
}

build_liboqs() {
  branch=$1
  if [ "$branch" ==  "master" ];then
    echo "Building liboqs master ..."
    autoreconf -i >> $LOGS 2>&1  
    ./configure --prefix=`pwd`/../openssl/oqs --enable-openssl >> $LOGS 2>&1
    make clean >> $LOGS 2>&1
    make -j8 >> $LOGS 2>&1
    make install >> $LOGS 2>&1
  else
    echo "Building liboqs nist ..."
    make clean >> $LOGS 2>&1
    PREFIX=`pwd`/../openssl/oqs make -j8 >> $LOGS 2>&1
    PREFIX=`pwd`/../openssl/oqs make install >> $LOGS 2>&1
  fi
}

build_openssl() {
  echo "Building openssl ..."
  ./Configure linux-x86_64 -lm >> $LOGS 2>&1
  make clean >> $LOGS 2>&1
  make depend >> $LOGS 2>&1
  make -j8 >> $LOGS 2>&1
}

rsa_pq_ciphersuites='OQSKEM-DEFAULT-RSA-AES128-GCM-SHA256 OQSKEM-DEFAULT-RSA-AES256-GCM-SHA384 OQSKEM-DEFAULT-ECDHE-RSA-AES128-GCM-SHA256 OQSKEM-DEFAULT-ECDHE-RSA-AES256-GCM-SHA384'
ecdsa_pq_ciphersuites='OQSKEM-DEFAULT-ECDSA-AES128-GCM-SHA256 OQSKEM-DEFAULT-ECDSA-AES256-GCM-SHA384 OQSKEM-DEFAULT-ECDHE-ECDSA-AES128-GCM-SHA256 OQSKEM-DEFAULT-ECDHE-ECDSA-AES256-GCM-SHA384'


echo "System information"
echo "=================="
echo `lsb_release -d`
echo "Compiler: `gcc --version | grep gcc`"
echo

for a in ${rsa_pq_ciphersuites};do
  (( pq_cnt++ ))  
done

for a in ${ecdsa_pq_ciphersuites};do
  (( pq_cnt++ ))  
done

openssl='OQS-OpenSSL_1_0_2-stable OQS-OpenSSL_1_1_1-stable'
oqs='master nist-branch'

for ssl_branch in $openssl;do
  if [ -d openssl ];then
    rm -rf openssl
  fi
  git clone --branch ${ssl_branch} https://github.com/open-quantum-safe/openssl.git

  for oqs_branch in $oqs;do
    if [ -d "openssl/oqs" ];then
      rm -rf openssl/oqs
    fi
    rm -rf liboqs
    git clone --branch ${oqs_branch} https://github.com/open-quantum-safe/liboqs.git
    
    cd liboqs 
    build_liboqs ${oqs_branch}
    cd ../openssl
    build_openssl
    
    echo
    echo "Build information:"
    echo "=================="
    echo "OpenSSL: ${ssl_branch}"  
    echo "liboqs: ${oqs_branch}"  

    echo
    echo "=========================================="
    echo "Generating RSA key and certificate ..."
    rm -f server.pem server.key server.cer
    apps/openssl req -x509 -new -newkey rsa:2048 -keyout server.key -nodes -out server.cer -sha256 -days 365 -config apps/openssl.cnf -subj "/" >> $LOGS 2>&1
    if [ $? -eq 0 ];then
      echo "Key and certificate generation successful."
      echo "=========================================="
    fi

    cat server.key server.cer > server.pem
    
    #sf_cnt - success failure count
    sf_cnt=0
    
    for a in ${rsa_pq_ciphersuites}; do
      echo
      echo "Cipher: $a" 
      apps/openssl s_server -cipher $a -www >> $LOGS 2>&1& if [ $? -eq 0 ];then
        echo "Server: Success"
      else
        echo "Server: Failure" 
      fi
 
      sleep 1
      echo 'Get /' | apps/openssl s_client  -cipher $a 2>&1 | grep "Cipher" | grep RSA >> $LOGS
      if [ $? -eq 0 ];then
        echo "Client: Success"
        (( sf_cnt++ ))
      else
        echo "Client: Failure" 
        (( sf_cnt-- ))
      fi
      pid=`ps -ef | grep openssl| grep s_server | awk '{print $2}'`
      kill $pid 2>>$LOGS 
      wait $pid 2>>$LOGS
    done
  
    echo
    echo "=========================================="
    echo "Generating ECDSA key and certificate ..."
    rm -f server.pem server.key server.cer
    apps/openssl req -x509 -nodes -days 3650 -newkey ec:<(openssl ecparam -name secp384r1) -keyout server.key -out server.cer -config apps/openssl.cnf -subj
'/' >> $LOGS 2>&1

    if [ $? -eq 0 ];then
      echo "Key and certificate generation successful."
      echo "=========================================="
    fi

    cat server.key server.cer > server.pem

    for a in ${ecdsa_pq_ciphersuites}; do
      echo
      echo "Cipher: $a" 
      apps/openssl s_server -cipher $a -www >> $LOGS 2>&1& 
      if [ $? -eq 0 ];then
        echo "Server: Success"
      else
        echo "Server: Failure" 
      fi

      sleep 1
      echo 'Get /' | apps/openssl s_client  -cipher $a 2>&1 | grep "Cipher" | grep ECDSA >> $LOGS 
      if [ $? -eq 0 ];then
        #echo "Successfully connected to server."
        echo "Client: Success"
        (( sf_cnt++ ))
      else
        echo "Client: Failure" 
        (( sf_cnt-- ))
      fi
      pid=`ps -ef | grep openssl| grep s_server | awk '{print $2}'`
      kill $pid 2>>$LOGS 
      wait $pid 2>>$LOGS

    done

      case "${ssl_branch}" in
      "OQS-OpenSSL_1_0_2-stable")
        case "${oqs_branch}" in
        "master")
          if [ ${sf_cnt} -eq ${pq_cnt} ];then
            openssl_1_0_2_master=success
          else
            openssl_1_0_2_master=failure
          fi
          ;;
          "nist-branch")
          if [ ${sf_cnt} -eq ${pq_cnt} ];then
            openssl_1_0_2_nist=success
          else
            openssl_1_0_2_nist=failure
          fi
          ;;
        esac 
      ;;
      "OQS-OpenSSL_1_1_1-stable")
        case "${oqs_branch}" in
        "master")
          if [ ${sf_cnt} -eq ${pq_cnt} ];then
            openssl_1_1_1_master=success
          else
            openssl_1_1_1_master=failure
          fi
         ;;
         "nist-branch")
          if [ ${sf_cnt} -eq ${pq_cnt} ];then
            openssl_1_1_1_nist=success
          else
            openssl_1_1_1_nist=failure
          fi
         ;;
         esac 
      ;;
      esac
      cd ..
  done
done

generate_table ${openssl_1_0_2_master} ${openssl_1_1_1_master} ${openssl_1_0_2_nist} ${openssl_1_1_1_nist}


